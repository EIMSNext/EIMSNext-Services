function ADD(num1,num2){let r1,r2,m;try{r1=num1.toString().split(".")[1].length}catch(e){r1=0}try{r2=num2.toString().split(".")[1].length}catch(e){r2=0}return m=Math.pow(10,Math.max(r1,r2)),(num1*m+num2*m)/m}function SUB(num1,num2){let r1,r2,m;try{r1=num1.toString().split(".")[1].length}catch(e){r1=0}try{r2=num2.toString().split(".")[1].length}catch(e){r2=0}return m=Math.pow(10,Math.max(r1,r2)),Number(((num1*m-num2*m)/m).toFixed(r1>=r2?r1:r2))}function MUL(num1,num2){let m=0,s1=num1.toString(),s2=num2.toString();try{m+=s1.split(".")[1].length}catch(e){}try{m+=s2.split(".")[1].length}catch(e){}return Number(s1.replace(".",""))*Number(s2.replace(".",""))/Math.pow(10,m)}function DIV(num1,num2){let t1=0,t2=0;try{t1=num1.toString().split(".")[1].length}catch(e){}try{t2=num2.toString().split(".")[1].length}catch(e){}return Number(num1.toString().replace(".",""))/Number(num2.toString().replace(".",""))*Math.pow(10,t2-t1)}function SUM(...args){return(args||[]).reduce(((previousValue,currentValue)=>ADD(previousValue,Array.isArray(currentValue)?SUM(...currentValue):currentValue||0)),0)}function MAX(...args){const arr=Array.isArray(args[0])?args[0]:args;return Math.max(...arr.map((v=>parseFloat(v))).filter((v=>!isNaN(v))))}function MIN(...args){const arr=Array.isArray(args[0])?args[0]:args;return Math.min(...arr.map((v=>parseFloat(v))).filter((v=>!isNaN(v))))}function ABS(val){return parseFloat(Math.abs(val))||0}function AVG(...args){const arr=Array.isArray(args[0])?args[0]:args;return arr.length?DIV(SUM(arr),arr.length):0}function POWER(num1,num2){return Math.pow(parseFloat(num1),parseFloat(num2))}function RAND(){return Math.random()}function CEIL(num){return Math.ceil(parseFloat(num))||0}function FLOOR(val){return Math.floor(parseFloat(val)||0)}function FIXED(num,decimals){const factor=Math.pow(10,decimals||0);return(Math.floor(parseFloat(num)*factor)/factor).toFixed(decimals||0)}function ISNUMBER(val){return""!==val&&null!==val&&!isNaN(Number(val))}function PI(){return Number(Math.PI)}function ROUND(val,num){return val=parseFloat(val),isNaN(val)?0:parseFloat(val.toFixed(parseFloat(num)||0))}function SQRT(val){return Math.sqrt(parseFloat(val))||0}function TONUMBER(num){return parseFloat(num)||0}function NOW(){const date=new Date;return date.getFullYear()+"-"+("0"+(date.getMonth()+1)).slice(-2)+"-"+("0"+date.getDate()).slice(-2)+" "+("0"+date.getHours()).slice(-2)+":"+("0"+date.getMinutes()).slice(-2)+":"+("0"+date.getSeconds()).slice(-2)}function TODAY(){const date=new Date;return date.getFullYear()+"-"+("0"+(date.getMonth()+1)).slice(-2)+"-"+("0"+date.getDate()).slice(-2)}function YEAR(day){return day?new Date(day).getFullYear():null}function MONTH(day){return day?new Date(day).getMonth()+1:null}function DAY(day){return day?new Date(day).getDate():null}function HOUR(day){return day?new Date(day).getHours():null}function MINUTE(day){return day?new Date(day).getMinutes():null}function SECOND(day){return day?new Date(day).getSeconds():null}function DIFFDAYS(start,end){const date1=new Date(start),date2=new Date(end);return parseInt(Math.ceil(Math.abs(date2.getTime()-date1.getTime())/864e5))}function DIFFHOURS(start,end){const date1=new Date(start),date2=new Date(end);return parseFloat(Math.abs(date2.getTime()-date1.getTime())/36e5).toFixed(2)}function DIFFMINUTES(start,end){const date1=new Date(start),date2=new Date(end);return parseInt(Math.ceil(Math.abs(date2.getTime()-date1.getTime())/6e4))}function TIMESTAMP(date){return Date.parse(date)}function STARTSWITH(str,find){return(""+str).substring(0,(""+find).length)===find}function EMPTY(value){return null==value||!(!Array.isArray(value)||!Array.isArray(value)||value.length)||"string"==typeof value&&!value}function NOTEMPTY(val){return!EMPTY(val)}function LEN(arr){return Array.isArray(arr)?arr.length:0}function MOD(num1,num2){return num1=parseFloat(num1),num2=parseFloat(num2),!num1||!num2||isNaN(num1)||isNaN(num2)?0:num1%num2}function SLICELEFT(str,len){return(""+str).slice(0,Number(len)||0)}function SLICERIGHT(str,len){return(""+str).slice(-1*Number(len))}function TOLOWER(str){return(""+str).toLowerCase()}function TOUPPER(str){return(""+str).toUpperCase()}function INCLUDES(str,find){return(str||"").indexOf(find||"")}function REPLACE(str,search,replace){return(str||"").replace(search||"",replace||"")}function REPLACEALL(str,search,replace){return(str||"").replaceAll(search||"",replace||"")}function TRIM(str){return(str||"").trim()}function TOCHINSESAMOUNT(amount){let chnNumChar=["零","壹","贰","叁","肆","伍","陆","柒","捌","玖"],chnUnitSection=["","万","亿","万亿","亿亿"],chnUnitChar=["","拾","佰","仟"],chnDecimalUnit=["角","分"];function sectionToChinese(section){let strIns="",chnStr="",unitPos=0,zero=!0;for(;section>0;){let v=section%10;0===v?zero||(zero=!0,chnStr=chnNumChar[v]+chnStr):(zero=!1,strIns=chnNumChar[v],strIns+=chnUnitChar[unitPos],chnStr=strIns+chnStr),unitPos++,section=Math.floor(section/10)}return chnStr}let unitPos=0,strIns="",chnStr="",needZero=!1;if(0===amount)return chnNumChar[0];let integerPart=Math.floor(amount),decimalPart=Math.round(100*(amount-integerPart));for(;integerPart>0;){let section=integerPart%1e4;needZero&&(chnStr=chnNumChar[0]+chnStr),strIns=sectionToChinese(section),strIns+=0!==section?chnUnitSection[unitPos]:chnUnitSection[0],chnStr=strIns+chnStr,needZero=section<1e3&&section>0,integerPart=Math.floor(integerPart/1e4),unitPos++}return chnStr&&(chnStr+="元"),decimalPart>0?(chnStr+=chnNumChar[Math.floor(decimalPart/10)]+chnDecimalUnit[0],decimalPart%10!=0&&(chnStr+=chnNumChar[decimalPart%10]+chnDecimalUnit[1])):chnStr&&(chnStr+="整"),chnStr}function UNION(...args){return(Array.isArray(args[0])?args[0]:args).filter(((value,index,self)=>self.indexOf(value)===index))}function AND(...args){return!!args.reduce(((previousValue,currentValue)=>previousValue&&currentValue),!0)}function OR(...args){return!!args.reduce(((previousValue,currentValue)=>previousValue||currentValue),!1)}function IF(bool,valid=!0,invalid=!1){return bool?valid:invalid}function DEFAULT(value,def){return null==value?def:value}function CASE(...args){for(let i=0;i<args.length-1;i+=2)if(args[i])return args[i+1];return null}function COLUMN(arr,key){const value=[];return Array.isArray(arr)&&arr.forEach((function(v){Array.isArray(v)?value.push(...COLUMN(v,key)):v&&value.push(v[key])})),value}function VALUE(obj,key,def){const lst=(""+key).split(".");let val=obj;for(let i=0;i<lst.length;i++){if(!hasProperty(val,lst[i]))return def;val=val[lst[i]]}return val}function CONCAT(...args){return"".concat(...args)}function INTERSECTIONSET(array1,array2){const intersectionArray=[];for(let i=0;i<array1.length;i++){const element=array1[i];-1!==array2.indexOf(element)&&-1===intersectionArray.indexOf(element)&&intersectionArray.push(element)}return intersectionArray}function LIST(...args){return args}function IN(lst,find){return(lst||[]).indexOf(find)>-1}function NIN(lst,find){return!IN(lst,find)}function FALSE(){return!1}function TRUE(){return!0}function NOT(val){return!val}function EQ(val1,val2){return val1===val2}function GE(val1,val2){return val1>=val2}function GT(val1,val2){return val1>val2}function LE(val1,val2){return val1<=val2}function LT(val1,val2){return val1<val2}function NE(val1,val2){return val1!==val2}function hasProperty(rule,k){return{}.hasOwnProperty.call(rule,k)}